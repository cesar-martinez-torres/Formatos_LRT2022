library IEEE;
use IEEE.std_logic_1164.all;

entity PBWC is
	port(
    Clock,Reset, Press: in std_logic;
    Open_CW: out std_logic;
    Close_CCW: out std_logic;
    );
 end PBWC;
 
 architecture PBWC_arch of PBWC is

type State_type is (w_closed, w_open); -- Declarar todos los estados del problema
signal current_state, next_state: State_type; -- Declaracion de señales, estado actual, estado futuro

begin
---------------- Memoria de estados
STATE_MEMORY : process (Clock, Reset)
begin
	if (Reset= '0') then 
		current_state <= w_closed;
	elsif (Clock'event and Clock='1') then 
    	current_state <= next_state;
    end if;
end process;
--------- Lógica estado siguiente
NEXT_STATE_LOGIC : process(current_state, Press)
begin
	case (current_state) is
    	when w_closed => if (Press='1') then 
        					next_state <= w_open;
                         else
                         	next_state <= w_closed;
                         end if;
        when w_open =>  if(Press='1') then
        					next_state <= w_closed;
                        else 
                        	next_state <= w_open;
                        end if;
        when others => next_state <= w_closed;
     end case;
end process;
------------------ Logica de la salida
OUTPUT_LOGIC : process (current_state, Press)
begin
	case (current_state) is
    	when w_closed => if (Press='1') then 
        					Open_CW <= '1';  Close_CCW <= '0'; 
                         else
                         	Open_CW <= '0';  Close_CCW <= '0'; 
                         end if;
        when w_open =>  if(Press='1') then
        					Open_CW <= '0';  Close_CCW <= '1'; 
                        else 
                        	Open_CW <= '0';  Close_CCW <= '0'; 
                        end if;
        when others => Open_CW <= '1';  Close_CCW <= '0'; 
     end case;
end process;
end architecture;
